import telebot  # library for working with telegram API
import config   # file with TOKEN and SOlite table path
from database import UsersData  # data from database
import schedule  # working with time
from threading import Thread  # running multiple operations simultaneously
from time import sleep  # func for timer
from telebot import types  # module for bot configuration


bot = telebot.TeleBot(config.TOKEN)  # creating bot
difficulty = None
task = None    # global variables
time = None
user_id = None


@bot.message_handler(commands=["start", "help"])  # bot answers /start /help
def start_replier(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç üí´, {0.first_name}!\n–º–µ–Ω—è –∑–æ–≤—É—Ç toDoBot –∏ —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç "
                     "—Ç–µ–±–µ –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ, –ø—Ä–æ—Å—Ç–æ —Ç—ã–∫–Ω–∏ –Ω–∞ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html')
    send_menu(message)
    users_data = UsersData(config.table_path)  # adding user to database
    users_data.add_user(message.from_user.id)
    users_data.connection.close()


def send_menu(message):  # bot sends all possible commands
    bot.send_message(message.chat.id, "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—Éüë©‚Äçüíª\n"
                                      "/del - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É‚ùå\n"
                                      "/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—áüåê\n"
                                      "/set_time - —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ‚è∞\n")


@bot.message_handler(commands=["add"])  # function for adding new goal
def ask_difficulty(message):
    bot.send_message(message.chat.id, "–æ—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—Éüõ©")
    bot.register_next_step_handler(message, get_task)


def get_task(message):  # function takes goal information from user
    global task
    global user_id
    task = message.text
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ü—Ä–æ—Å—Ç–∞—è", callback_data='1')
    item2 = types.InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data='2')
    item3 = types.InlineKeyboardButton("–°–ª–æ–∂–Ω–∞—è", callback_data='3')

    markup.add(item1, item2, item3)  # creating buttons

    bot.send_message(message.chat.id, "–æ—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç—åü§Ø —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)  # func answers button calls
def get_difficulty(call):
    try:
        if call.message:
            global task
            global difficulty
            global user_id
            difficulty = call.data  # gets button data
            users_data = UsersData(config.table_path)
            users_data.add_task(task, difficulty, user_id)  # add the task to the database to user message.chat.id
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–æ—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç—åü§Ø —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏",
                                  reply_markup=None)
            users_data.connection.close()
            set_time(call.message)  # making time notification
    except Exception as e:
        print(repr(e))


@bot.message_handler(commands=["set_time"])
def set_time(call):
    bot.send_message(call.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–∏ –≤—Ä–µ–º—è‚è∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —Å—É—Ç–∫–∏ –≤ 24 —á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ, "
                                   "–∫–æ–≥–¥–∞ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å "
                                   "–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                                   "–ù–∞–ø—Ä–∏–º–µ—Ä, —É—Ç—Ä–æ–º, –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π/—É—á—ë–±–æ–π –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–ª")
    bot.register_next_step_handler(call, add_new_time)


def add_new_time(message):
    global user_id
    global time
    user_id = message.from_user.id
    time = message.text  # takes time from user
    if len(time) == 4:
        time = "0" + time
    users_data = UsersData(config.table_path)
    users_data.add_time(time, user_id)     # sends time to table path
    users_data.connection.close()
    bot.reply_to(message, "–ì–æ—Ç–æ–≤–æ")
    send_menu(message)
    Thread(target=schedule_checker(time)).start()


def schedule_checker(time):  # sends wakeup message
    if time is not None:  # checks if the time is right
        schedule.every().day.at(time).do(send_wakeup_message)
    while True:
        schedule.run_pending()
        sleep(1)


def send_wakeup_message():
    bot.send_message(user_id, "üî•üî•üî•–í—Ä–µ–º—è –≤–∑—è—Ç—å—Å—è –∑–∞ —Ä–∞–±–æ—Ç—Éüî•üî•üî•\n–Ω–∞—á–∏–Ω–∞–π –ª—É—á—à–µ —Å–æ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏:")
    users_data = UsersData(config.table_path)  # takes data about task list in database and sends it
    task_list = users_data.get_tasks_for_user(user_id)
    bot.send_message(user_id, task_list)
    users_data.connection.close()


@bot.message_handler(commands=["del"])
def del_task(message):   # takes exact task to delete
    bot.send_message(message.from_user.id,
                     f'–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{get_tasks_list(message.from_user.id)}')
    bot.send_message(message.chat.id, "–æ—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
    bot.register_next_step_handler(message, remove_task_from_data_base)


def remove_task_from_data_base(message):
    global task
    task = message.text
    users_data = UsersData(config.table_path)
    users_data.delete_task(task)  # deletes task in database
    bot.send_message(message.from_user.id,
                     f'–ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫:\n{get_tasks_list(message.from_user.id)}')
    # —É–¥–∞–ª—è–µ–º task –∏–∑ –±–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è message.chat.id
    users_data.connection.close()

    send_menu(message)


@bot.message_handler(commands=["list"])
def list_tasks(message):
    task_list = get_tasks_list(message.from_user.id)  # lists tasks from database
    bot.send_message(message.from_user.id, "–Ω–∞—á–∏–Ω–∞—Ç—å –ª—É—á—à–µ —Å–æ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏:")
    bot.send_message(message.from_user.id, task_list)
    # –≤ list c–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    send_menu(message)


def get_tasks_list(user_id):
    users_data = UsersData(config.table_path)
    task_list = users_data.get_tasks_for_user(user_id)  # task list is taken from database
    if len(task_list) == 0:
        task_list = '—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç'
    users_data.connection.close()
    return task_list


@bot.message_handler(func=lambda message: True) # bot answers messages that it doesnt understand
def echo_all(message):
    bot.reply_to(message, "—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é(((")
    send_menu(message)


if __name__ == '__main__':  # starting bot
     bot.infinity_polling()
