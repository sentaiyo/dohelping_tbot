import telebot
import config
from database import UsersData
import schedule
from threading import Thread
from time import sleep

# from telebot import types

bot = telebot.TeleBot(config.TOKEN)
difficulty = None
task = None
time = None
user_id = None


@bot.message_handler(commands=["start", "help"])
def start_replier(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç üí´, {0.first_name}!\n–º–µ–Ω—è –∑–æ–≤—É—Ç toDoBot –∏ —è —É–º–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç "
                     "—Ç–µ–±–µ –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html')
    bot.send_message(message.chat.id, "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n/del - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á")
    users_data = UsersData(config.table_path)
    users_data.add_user(message.from_user.id)


@bot.message_handler(commands=["add"])
def ask_difficulty(message):
    bot.send_message(message.chat.id, "–æ—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏ –æ—Ç 1 –¥–æ 3")
    bot.register_next_step_handler(message, get_difficulty)


def get_difficulty(message):
    global difficulty
    difficulty = message.text  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    bot.send_message(message.chat.id, "–æ—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
    bot.register_next_step_handler(message, get_task)


"""def add_task(message):
    bot.send_message(message.chat.id, "–æ—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
    bot.register_next_step_handler(message, get_task)"""


def get_task(message):
    global task
    global difficulty
    task = message.text
    users_data = UsersData(config.table_path)
    users_data.add_task(task, difficulty, message.from_user.id)  # –¥–æ–±–∞–≤–ª—è–µ–º task –≤ –±–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é message.chat.id


@bot.message_handler(commands=['add_time'])
def add_new_time(message):
    bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã —Å–≤–æ–±–æ–¥–µ–Ω\n"
                                           "–ù–∞–ø—Ä–∏–º–µ—Ä, —É—Ç—Ä–æ–º, –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π/—É—á—ë–±–æ–π –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–ª")
    bot.register_next_step_handler(message, add_new_user)


def add_new_user(message):
    global user_id
    global time
    user_id = message.from_user.id
    time = message.text
    users_data = UsersData(config.table_path)
    users_data.add_time(time, user_id)
    bot.reply_to(message, "–ì–æ—Ç–æ–≤–æ")
    Thread(target=schedule_checker(time)).start()


def schedule_checker(time):
    if time is not None:
        schedule.every().day.at(time).do(send_wakeup_message)
    while True:
        schedule.run_pending()
        sleep(1)


def send_wakeup_message():
    bot.send_message(user_id, "wakeup")


@bot.message_handler(commands=["del"])
def del_task(message):
    bot.send_message(message.chat.id, "–æ—Ç–ø—Ä–∞–≤—å –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
    bot.register_next_step_handler(message, remove_task_from_data_base)


def remove_task_from_data_base(message):
    global task
    task = message.text
    # —É–¥–∞–ª—è–µ–º task –∏–∑ –±–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è message.chat.id


@bot.message_handler(commands=["list"])
def list_tasks(message):
    users_data = UsersData(config.table_path)
    task_list = users_data.get_tasks_for_user(message.from_user.id)
    bot.send_message(message.from_user.id, task_list)  # –≤ list c–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, message.text)


if __name__ == '__main__':
     bot.infinity_polling()
